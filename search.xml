<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>tset</title>
      <link href="/2025/01/19/tset/"/>
      <url>/2025/01/19/tset/</url>
      
        <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pyshark</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlparse, parse_qs</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用于存储提取的数据</span></span><br><span class="line">extracted_data = []</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取PCAP文件并过滤 HTTP POST 请求</span></span><br><span class="line">cap = pyshark.FileCapture(<span class="string">&quot;1.pcapng&quot;</span>, display_filter=<span class="string">&quot;http.request.method == POST&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历捕获的数据包，提取 HTTP POST 请求</span></span><br><span class="line"><span class="keyword">for</span> packet <span class="keyword">in</span> cap:</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;HTTP&quot;</span> <span class="keyword">in</span> packet:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 尝试从 packet.http.uri 获取 URI</span></span><br><span class="line">            uri = packet.http.uri <span class="keyword">if</span> <span class="built_in">hasattr</span>(packet.http, <span class="string">&#x27;uri&#x27;</span>) <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line">            <span class="comment"># 如果没有找到 uri，尝试使用 full_uri</span></span><br><span class="line">            <span class="keyword">if</span> uri <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">and</span> <span class="built_in">hasattr</span>(packet.http, <span class="string">&#x27;request_full_uri&#x27;</span>):</span><br><span class="line">                uri = packet.http.request_full_uri</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> uri:</span><br><span class="line">                <span class="comment"># 从 URI 中提取 userid 参数</span></span><br><span class="line">                parsed_uri = urlparse(uri)</span><br><span class="line">                query_params = parse_qs(parsed_uri.query)</span><br><span class="line">                userid = query_params.get(<span class="string">&quot;userid&quot;</span>, [<span class="literal">None</span>])[<span class="number">0</span>]  <span class="comment"># 获取userid参数</span></span><br><span class="line"></span><br><span class="line">                <span class="comment"># 如果找到了userid，就继续处理</span></span><br><span class="line">                <span class="keyword">if</span> userid:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">f&quot;UserID Found: <span class="subst">&#123;userid&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">                    <span class="comment"># 提取并打印 POST 请求体数据（如果有的话）</span></span><br><span class="line">                    <span class="keyword">if</span> <span class="built_in">hasattr</span>(packet.http, <span class="string">&#x27;file_data&#x27;</span>):</span><br><span class="line">                        <span class="comment"># 获取 POST 数据，数据是十六进制字符串</span></span><br><span class="line">                        raw_data = packet.http.file_data</span><br><span class="line">                        <span class="comment"># 去掉冒号，将十六进制字符串转为字节</span></span><br><span class="line">                        raw_data_no_colon = raw_data.replace(<span class="string">&quot;:&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">try</span>:</span><br><span class="line">                            <span class="comment"># 将十六进制字符串转换为字节</span></span><br><span class="line">                            byte_data = <span class="built_in">bytes</span>.fromhex(raw_data_no_colon)</span><br><span class="line">                            decoded_data = byte_data.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">                            <span class="comment"># 处理 Unicode 转义字符</span></span><br><span class="line">                            decoded_data = decoded_data.encode(<span class="string">&#x27;utf-8&#x27;</span>).decode(<span class="string">&#x27;unicode_escape&#x27;</span>)</span><br><span class="line"></span><br><span class="line">                            <span class="comment"># 提取 name, idcard, phone</span></span><br><span class="line">                            data = json.loads(decoded_data)</span><br><span class="line">                            <span class="keyword">if</span> <span class="built_in">all</span>(k <span class="keyword">in</span> data <span class="keyword">for</span> k <span class="keyword">in</span> [<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;idcard&#x27;</span>, <span class="string">&#x27;phone&#x27;</span>]):</span><br><span class="line">                                <span class="comment"># 将 userid, name, idcard, phone 保存到字典中</span></span><br><span class="line">                                extracted_data.append(&#123;</span><br><span class="line">                                    <span class="string">&quot;userid&quot;</span>: userid,</span><br><span class="line">                                    <span class="string">&quot;name&quot;</span>: data[<span class="string">&quot;name&quot;</span>],</span><br><span class="line">                                    <span class="string">&quot;idcard&quot;</span>: data[<span class="string">&quot;idcard&quot;</span>],</span><br><span class="line">                                    <span class="string">&quot;phone&quot;</span>: data[<span class="string">&quot;phone&quot;</span>]</span><br><span class="line">                                &#125;)</span><br><span class="line">                        <span class="keyword">except</span> UnicodeDecodeError:</span><br><span class="line">                            <span class="built_in">print</span>(<span class="string">&quot;Unable to decode POST data as UTF-8.&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span> AttributeError <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;Error parsing packet: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将提取的数据保存到一个 JSON 文件</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;extracted_data.json&quot;</span>, <span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    json.dump(extracted_data, f, ensure_ascii=<span class="literal">False</span>, indent=<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Extracted data saved to extracted_data.json&quot;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Testing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Misc——DSASignatureData题解</title>
      <link href="/2025/01/19/%E7%AC%AC%E5%85%AB%E5%B1%8A%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91%C2%B7%E4%B8%AD%E5%9B%BD%E6%9D%AD%E5%B7%9E%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B/"/>
      <url>/2025/01/19/%E7%AC%AC%E5%85%AB%E5%B1%8A%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91%C2%B7%E4%B8%AD%E5%9B%BD%E6%9D%AD%E5%B7%9E%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B/</url>
      
        <content type="html"><![CDATA[<p>用wireshark查看过滤POST之后发现传输的信息</p><p><img src="https://raw.githubusercontent.com/shiye1007/picgo/mian/images/article/%E7%AC%AC%E5%85%AB%E5%B1%8A%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91%C2%B7%E4%B8%AD%E5%9B%BD%E6%9D%AD%E5%B7%9E%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B1.png"><br>先用脚本提取其中的信息保存在extracted_data.json文件中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pyshark</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlparse, parse_qs</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用于存储提取的数据</span></span><br><span class="line">extracted_data = []</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取PCAP文件并过滤 HTTP POST 请求</span></span><br><span class="line">cap = pyshark.FileCapture(<span class="string">&quot;1.pcapng&quot;</span>, display_filter=<span class="string">&quot;http.request.method == POST&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历捕获的数据包，提取 HTTP POST 请求</span></span><br><span class="line"><span class="keyword">for</span> packet <span class="keyword">in</span> cap:</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;HTTP&quot;</span> <span class="keyword">in</span> packet:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 尝试从 packet.http.uri 获取 URI</span></span><br><span class="line">            uri = packet.http.uri <span class="keyword">if</span> <span class="built_in">hasattr</span>(packet.http, <span class="string">&#x27;uri&#x27;</span>) <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line">            <span class="comment"># 如果没有找到 uri，尝试使用 full_uri</span></span><br><span class="line">            <span class="keyword">if</span> uri <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">and</span> <span class="built_in">hasattr</span>(packet.http, <span class="string">&#x27;request_full_uri&#x27;</span>):</span><br><span class="line">                uri = packet.http.request_full_uri</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> uri:</span><br><span class="line">                <span class="comment"># 从 URI 中提取 userid 参数</span></span><br><span class="line">                parsed_uri = urlparse(uri)</span><br><span class="line">                query_params = parse_qs(parsed_uri.query)</span><br><span class="line">                userid = query_params.get(<span class="string">&quot;userid&quot;</span>, [<span class="literal">None</span>])[<span class="number">0</span>]  <span class="comment"># 获取userid参数</span></span><br><span class="line"></span><br><span class="line">                <span class="comment"># 如果找到了userid，就继续处理</span></span><br><span class="line">                <span class="keyword">if</span> userid:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">f&quot;UserID Found: <span class="subst">&#123;userid&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">                    <span class="comment"># 提取并打印 POST 请求体数据（如果有的话）</span></span><br><span class="line">                    <span class="keyword">if</span> <span class="built_in">hasattr</span>(packet.http, <span class="string">&#x27;file_data&#x27;</span>):</span><br><span class="line">                        <span class="comment"># 获取 POST 数据，数据是十六进制字符串</span></span><br><span class="line">                        raw_data = packet.http.file_data</span><br><span class="line">                        <span class="comment"># 去掉冒号，将十六进制字符串转为字节</span></span><br><span class="line">                        raw_data_no_colon = raw_data.replace(<span class="string">&quot;:&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">try</span>:</span><br><span class="line">                            <span class="comment"># 将十六进制字符串转换为字节</span></span><br><span class="line">                            byte_data = <span class="built_in">bytes</span>.fromhex(raw_data_no_colon)</span><br><span class="line">                            decoded_data = byte_data.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">                            <span class="comment"># 处理 Unicode 转义字符</span></span><br><span class="line">                            decoded_data = decoded_data.encode(<span class="string">&#x27;utf-8&#x27;</span>).decode(<span class="string">&#x27;unicode_escape&#x27;</span>)</span><br><span class="line"></span><br><span class="line">                            <span class="comment"># 提取 name, idcard, phone</span></span><br><span class="line">                            data = json.loads(decoded_data)</span><br><span class="line">                            <span class="keyword">if</span> <span class="built_in">all</span>(k <span class="keyword">in</span> data <span class="keyword">for</span> k <span class="keyword">in</span> [<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;idcard&#x27;</span>, <span class="string">&#x27;phone&#x27;</span>]):</span><br><span class="line">                                <span class="comment"># 将 userid, name, idcard, phone 保存到字典中</span></span><br><span class="line">                                extracted_data.append(&#123;</span><br><span class="line">                                    <span class="string">&quot;userid&quot;</span>: userid,</span><br><span class="line">                                    <span class="string">&quot;name&quot;</span>: data[<span class="string">&quot;name&quot;</span>],</span><br><span class="line">                                    <span class="string">&quot;idcard&quot;</span>: data[<span class="string">&quot;idcard&quot;</span>],</span><br><span class="line">                                    <span class="string">&quot;phone&quot;</span>: data[<span class="string">&quot;phone&quot;</span>]</span><br><span class="line">                                &#125;)</span><br><span class="line">                        <span class="keyword">except</span> UnicodeDecodeError:</span><br><span class="line">                            <span class="built_in">print</span>(<span class="string">&quot;Unable to decode POST data as UTF-8.&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span> AttributeError <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;Error parsing packet: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将提取的数据保存到一个 JSON 文件</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;extracted_data.json&quot;</span>, <span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    json.dump(extracted_data, f, ensure_ascii=<span class="literal">False</span>, indent=<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Extracted data saved to extracted_data.json&quot;</span>)</span><br></pre></td></tr></table></figure><p>再对json文件进行转换，其中包含排序和去重操作，并保存在output_sorted_unique.csv中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="comment"># 假设你的数据在 extracted_data.json 中，首先读取数据</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;extracted_data.json&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    json_data = json.load(f)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果数据是字典格式（仅有一个记录），将其转换为列表</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">isinstance</span>(json_data, <span class="built_in">dict</span>):</span><br><span class="line">    json_data = [json_data]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将所有字段转换为文本，确保统一格式</span></span><br><span class="line"><span class="keyword">for</span> entry <span class="keyword">in</span> json_data:</span><br><span class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> entry:</span><br><span class="line">        entry[key] = <span class="built_in">str</span>(entry[key])  <span class="comment"># 将每个字段转换为字符串</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 去重：使用集合对去重</span></span><br><span class="line">unique_data = &#123;<span class="built_in">tuple</span>(entry.items()) <span class="keyword">for</span> entry <span class="keyword">in</span> json_data&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将去重后的数据重新转换为字典</span></span><br><span class="line">unique_data = [<span class="built_in">dict</span>(item) <span class="keyword">for</span> item <span class="keyword">in</span> unique_data]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 排序：根据 userid 排序，确保按数字顺序排序</span></span><br><span class="line">unique_data.sort(key=<span class="keyword">lambda</span> x: <span class="built_in">int</span>(x[<span class="string">&quot;userid&quot;</span>]))  <span class="comment"># 按照 userid 排序，先转成整数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定输出的 CSV 文件名称</span></span><br><span class="line">csv_file = <span class="string">&quot;output_sorted_unique.csv&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开 CSV 文件进行写入</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(csv_file, mode=<span class="string">&#x27;w&#x27;</span>, newline=<span class="string">&#x27;&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    <span class="comment"># 创建 DictWriter 对象，字段名称根据 JSON 字典的键来设置</span></span><br><span class="line">    fieldnames = [<span class="string">&quot;userid&quot;</span>, <span class="string">&quot;name&quot;</span>, <span class="string">&quot;idcard&quot;</span>, <span class="string">&quot;phone&quot;</span>]</span><br><span class="line">    writer = csv.DictWriter(file, fieldnames=fieldnames)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 写入表头</span></span><br><span class="line">    writer.writeheader()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 写入每一行数据</span></span><br><span class="line">    writer.writerows(unique_data)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;CSV 文件已保存为 <span class="subst">&#123;csv_file&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>下面就开始对签名进行验证，并将验证不成功即被篡改的数据放到flag.csv中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> DSA</span><br><span class="line"><span class="keyword">from</span> Crypto.Signature <span class="keyword">import</span> DSS</span><br><span class="line"><span class="keyword">from</span> Crypto.Hash <span class="keyword">import</span> SHA256</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 加载公钥</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">load_public_key</span>(<span class="params">filename</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        key = DSA.import_key(f.read())</span><br><span class="line">    <span class="keyword">return</span> key</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 验证数字签名</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">verify_signature</span>(<span class="params">data, signature, public_key</span>):</span><br><span class="line">    h = SHA256.new(data.encode())  <span class="comment"># 计算数据的哈希值</span></span><br><span class="line">    verifier = DSS.new(public_key, <span class="string">&#x27;fips-186-3&#x27;</span>)  <span class="comment"># 使用DSA算法进行签名验证</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 解码Base64签名并验证</span></span><br><span class="line">        verifier.verify(h, base64.b64decode(signature))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span>  <span class="comment"># 验证通过</span></span><br><span class="line">    <span class="keyword">except</span> ValueError:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span>  <span class="comment"># 验证失败</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 读取数据文件并进行签名验证</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">validate_signatures</span>(<span class="params">data_file, signature_file, flag_file</span>):</span><br><span class="line">    <span class="comment"># 打开flag.csv文件，用于保存验证失败的记录</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(flag_file, <span class="string">&#x27;w&#x27;</span>, newline=<span class="string">&#x27;&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f_flag:</span><br><span class="line">        flag_writer = csv.writer(f_flag)</span><br><span class="line">        flag_writer.writerow([<span class="string">&#x27;userid&#x27;</span>, <span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;idcard&#x27;</span>, <span class="string">&#x27;phone&#x27;</span>])  <span class="comment"># 写入表头</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 读取数据文件和签名文件</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(data_file, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f_data, <span class="built_in">open</span>(signature_file, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f_sig:</span><br><span class="line">            reader_data = csv.reader(f_data)</span><br><span class="line">            reader_sig = csv.reader(f_sig)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 跳过标题行</span></span><br><span class="line">            <span class="built_in">next</span>(reader_data)</span><br><span class="line">            <span class="built_in">next</span>(reader_sig)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 对每一行数据进行签名验证</span></span><br><span class="line">            <span class="keyword">for</span> data_row, sig_row <span class="keyword">in</span> <span class="built_in">zip</span>(reader_data, reader_sig):</span><br><span class="line">                userid, name, idcard, phone = data_row</span><br><span class="line">                username, name_signature, idcard_signature, phone_signature = sig_row</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 获取对应用户的公钥</span></span><br><span class="line">                public_key_filename = <span class="string">f&quot;public/public-<span class="subst">&#123;userid.zfill(<span class="number">4</span>)&#125;</span>.pem&quot;</span></span><br><span class="line">                public_key = load_public_key(public_key_filename)</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 验证每个字段的签名</span></span><br><span class="line">                is_name_valid = verify_signature(name, name_signature, public_key)</span><br><span class="line">                is_idcard_valid = verify_signature(idcard, idcard_signature, public_key)</span><br><span class="line">                is_phone_valid = verify_signature(phone, phone_signature, public_key)</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 检查是否有任意一项验证失败</span></span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> is_name_valid <span class="keyword">or</span> <span class="keyword">not</span> is_idcard_valid <span class="keyword">or</span> <span class="keyword">not</span> is_phone_valid:</span><br><span class="line">                    <span class="comment"># 如果有验证失败，则将这一行写入flag.csv</span></span><br><span class="line">                    flag_writer.writerow([userid, name, idcard, phone])</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 输出验证结果</span></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;用户<span class="subst">&#123;userid&#125;</span>验证结果：&quot;</span>)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;  姓名签名验证<span class="subst">&#123;<span class="string">&#x27;通过&#x27;</span> <span class="keyword">if</span> is_name_valid <span class="keyword">else</span> <span class="string">&#x27;失败&#x27;</span>&#125;</span>&quot;</span>)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;  身份证签名验证<span class="subst">&#123;<span class="string">&#x27;通过&#x27;</span> <span class="keyword">if</span> is_idcard_valid <span class="keyword">else</span> <span class="string">&#x27;失败&#x27;</span>&#125;</span>&quot;</span>)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;  电话签名验证<span class="subst">&#123;<span class="string">&#x27;通过&#x27;</span> <span class="keyword">if</span> is_phone_valid <span class="keyword">else</span> <span class="string">&#x27;失败&#x27;</span>&#125;</span>&quot;</span>)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;-&quot;</span> * <span class="number">30</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件路径</span></span><br><span class="line">data_file = <span class="string">&#x27;output_sorted_unique.csv&#x27;</span>  <span class="comment"># 你的数据文件</span></span><br><span class="line">signature_file = <span class="string">&#x27;data-sign.csv&#x27;</span>  <span class="comment"># 你的签名文件</span></span><br><span class="line">flag_file = <span class="string">&#x27;flag.csv&#x27;</span>  <span class="comment"># 保存验证失败记录的文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行签名验证并保存不通过的数据到flag.csv</span></span><br><span class="line">validate_signatures(data_file, signature_file, flag_file)</span><br></pre></td></tr></table></figure><p>最终在平台提交flag.csv得到flag</p><p><img src="https://raw.githubusercontent.com/shiye1007/picgo/mian/images/article/%E7%AC%AC%E5%85%AB%E5%B1%8A%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91%C2%B7%E4%B8%AD%E5%9B%BD%E6%9D%AD%E5%B7%9E%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B2.png"></p><p>提交即可</p>]]></content>
      
      
      <categories>
          
          <category> 第八届西湖论剑·中国杭州网络安全安全技能大赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Testing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2025/01/13/hello-world/"/>
      <url>/2025/01/13/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
